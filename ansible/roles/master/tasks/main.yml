---
- name: open required port(s)
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  with_items:
    - 6443
    - 10250
    - 10257
    - 10259

- name: create required local directories
  delegate_to: localhost
  become: no
  file:
    path: "{{ master.wd.local }}/tls/etcd"
    state: directory

- name: download database certificates
  delegate_to: "{{ groups['db'][0] }}"
  fetch:
    src: /etc/kubernetes/pki/{{ item }}
    dest: "{{ master.wd.local }}/tls/{{ item }}"
    flat: yes
  with_items:
    - etcd/ca.crt
    - apiserver-etcd-client.crt
    - apiserver-etcd-client.key

- name: create required remote directories
  file:
    path: "/etc/kubernetes/pki/etcd"
    state: directory

- name: add database certificates
  copy:
    src: "{{ master.wd.local }}/tls/{{ item }}"
    dest: "/etc/kubernetes/pki/{{ item }}"
  with_items:
    - etcd/ca.crt
    - apiserver-etcd-client.crt
    - apiserver-etcd-client.key

- name: add configuration
  template:
    src: etc/kubernetes/kubeadm-config.yml.j2
    dest: /etc/kubernetes/kubeadm-config.yml

- name: configure first control plane
  run_once: yes
  block:

  - name: initiliase the control plane
    shell: "kubeadm init --config=/etc/kubernetes/kubeadm-config.yml --upload-certs > kubeadm.log"
    args:
      chdir: $HOME
      creates: kubeadm.log

  - name: setup configuration
    import_tasks: kube.yml

  - name: apply network
    import_tasks: network.yml

  - name: read kubeadm log
    slurp:
      src: ~/kubeadm.log
    register: log

- name: configure the replicas
  when: ansible_host != groups['masters'][0]
  block:

  - name: "join the control plane(s)"
    shell: "{{ master_command }}"
    vars:
      master_command: "{{ content | regex_search('.*kubeadm\\s+join.*\\\n\t.*\\\n\t.*', ignorecase=True) | trim | regex_replace('[\\n\\t]', '') }}"
      content: "{{ log['content'] | b64decode }}"

  - name: setup kube configuration
    import_tasks: kube.yml

  - name: apply network
    import_tasks: network.yml
